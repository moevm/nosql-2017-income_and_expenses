<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OxyPlot.SharpDX.Wpf</name>
    </assembly>
    <members>
        <member name="T:OxyPlot.SharpDX.Wpf.OxyColorConverter">
            <summary>
            Converts from OxyPlot colors to Windows.UI.Color and vice versa.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.OxyColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The language.</param>
            <returns>The maximum value of the thickness.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.OxyColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The convert.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The target type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The language.</param>
            <returns>The converted value.</returns> 
        </member>
        <member name="T:OxyPlot.SharpDX.Wpf.ThicknessConverter">
            <summary>
            Converts Thickness to double.
            </summary>
            <remarks>This is used to convert BorderThickness properties to Path.StrokeThickness (double).
            The maximum thickness value is used.</remarks>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The language.</param>
            <returns>The maximum value of the thickness.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The language.</param>
            <returns>Not implemented.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.Wpf.D3D11Image">
            <summary>
            Represents the Direct3D11 Image.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.D3D11Image.texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.D3D11Image.textureSurfaceHandle">
            <summary>
            The texture surface handle
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.D3D11Image.#ctor(SharpDX.Direct3D9.DeviceEx,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SharpDX.Wpf.D3D11Image"/> class. Associates an D3D11 render target with the current instance.
            </summary>
            <param name="device">A valid D3D9 DeviceEx.</param>
            <param name="renderTarget">A valid D3D11 render target. It must be created with the "Shared" flag.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.D3D11Image.InvalidateRendering">
            <summary>
            Marks the surface of element as invalid and requests its presentation on screen.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.D3D11Image.TrySetBackbufferPointer(System.IntPtr)">
            <summary>
            Try to set the back buffer pointer.
            </summary>
            <param name="ptr">A pointer to back buffer.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.D3D11Image.Dispose">
            <summary>
            Disposes associated D3D9 texture.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.D3D11Image.HandleIsFrontBufferAvailableChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Front buffer change event handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:OxyPlot.SharpDX.Wpf.PlotImage">
            <summary>
            Control, that renders Plot using SharpDX renderer, renders Tracker using WPF controls.
            Adds scrolling support.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.PlotWidthProperty">
            <summary>
            DependencyProperty as the backing store for PlotWidth
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.PlotHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for PlotHeight.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.PlotModelProperty">
            <summary>
            DependencyProperty as the backing store for PlotModel
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.ScrollLineDelta">
            <summary>
            The scroll line delta.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.MouseWheelDelta">
            <summary>
            The mouse wheel delta/
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.d3d11Device">
            <summary>
            The Direct3D11 device.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.d3d9Device">
            <summary>
            The Direct3D9 device.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.renderTarget">
            <summary>
            The render target.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.oxyRenderContext">
            <summary>
            The oxy render target.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.imageSource">
            <summary>
            The image source.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.overlayTransform">
            <summary>
            The overlay transform.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.extent">
            <summary>
            The extent.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.viewport">
            <summary>
            The viewport.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.offset">
            <summary>
            The offset vector.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotImage.designModeImage">
            <summary>
            The placeholder image for design time.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.#ctor">
            <summary>
             Initializes a new instance of the <see cref = "T:OxyPlot.SharpDX.Wpf.PlotImage" /> class.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.PlotModel">
            <summary>
            Gets or sets  the plot model.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.PlotHeight">
            <summary>
            Gets or sets the plot height.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.PlotWidth">
            <summary>
            Gets or sets the plot width.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.CanVerticallyScroll">
            <summary>
            Gets or sets a value indicating whether scrolling on the vertical axis is possible.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.CanHorizontallyScroll">
            <summary>
            Gets or sets a value indicating whether scrolling on the vertical axis is possible.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.ExtentWidth">
            <summary>
            Gets the horizontal size of the extent.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.ExtentHeight">
            <summary>
            Gets the vertical size of the extent.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport for this content.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.ViewportHeight">
            <summary>
            Gets the vertical size of the viewport for this content.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the scrolled content.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.VerticalOffset">
            <summary>
            Gets the vertical offset of the scrolled content.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.Offset">
            <summary>
             Gets the offset vector of the scrolled content.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.ScrollOwner">
            <summary>
            Gets or sets a System.Windows.Controls.ScrollViewer element that controls scrolling behavior.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.Overlay">
            <summary>
            Gets the overlay canvas.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotImage.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.Render(System.Boolean,System.Boolean)">
            <summary>
            Renders <see cref="P:OxyPlot.SharpDX.Wpf.PlotImage.PlotModel"/> to <see cref="T:OxyPlot.SharpDX.Wpf.D3D11Image"/> surface.
            </summary>
            <param name="invalidateSurface">Indicates whether on not surface should be recreated.</param>
            <param name="invalidateUnits">Indicates whether on not render units should be recreated.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.LineUp">
            <summary>
            Scrolls up within content by one logical unit.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.LineDown">
            <summary>
            Scrolls down within content by one logical unit.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.LineLeft">
            <summary>
            Scrolls left within content by one logical unit.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.LineRight">
            <summary>
            Scrolls right within content by one logical unit.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.PageUp">
            <summary>
            Scrolls up within content by one page.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.PageDown">
            <summary>
            Scrolls down within content by one page.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.PageLeft">
            <summary>
            Scrolls left within content by one page.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.PageRight">
            <summary>
            Scrolls right within content by one page.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.MouseWheelUp">
            <summary>
            Scrolls up within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.MouseWheelDown">
            <summary>
            Scrolls down within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.MouseWheelLeft">
            <summary>
            Scrolls left within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.MouseWheelRight">
            <summary>
            Scrolls right within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the amount of horizontal offset.
            </summary>
            <param name="offset">The degree to which content is horizontally offset from the containing viewport.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.SetVerticalOffset(System.Double)">
            <summary>
            Sets the amount of vertical offset.
            </summary>
            <param name="offset">The degree to which content is vertically offset from the containing viewport.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a System.Windows.Media.Visual
            object is visible.
            </summary>
            <param name="visual">A System.Windows.Media.Visual that becomes visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
            <returns>A <see cref="T:System.Windows.Rect"/> that is visible.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.Invalidate">
            <summary>
            Invalidates <see cref="T:OxyPlot.SharpDX.Wpf.PlotImage"/> current instance.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.GetVisualChild(System.Int32)">
            <summary>
            Overrides System.Windows.Media.Visual.GetVisualChild(<see cref="T:System.Int32"/>), and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that
            are directed by the layout system. The rendering instructions for this element
            are not used directly when this method is invoked, and are instead preserved
            for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for
            child elements and determines a size for the System.Windows.FrameworkElement-derived
            class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can
            be specified as a value to indicate that the element will size to whatever content
            is available.
            </param>
            <returns>The size that this element determines it needs during layout, based on its calculations
            of child element sizes.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a
            size for a System.Windows.FrameworkElement derived class.
            </summary>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself
            and its children.
            </param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.InitRendering">
            <summary>
            Initializes DirectX rendering resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.CleanResources">
            <summary>
            Free used resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.OnUnloaded">
            <summary>
            Called when control unloaded.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotImage.AddOffset(System.Double,System.Double)">
            <summary>
            Changes offset by <paramref name="deltaX"/>, <paramref name="deltaY"/> vector.
            </summary>
            <param name="deltaX">The X axis delta.</param>
            <param name="deltaY">The Y axis delta.</param>
        </member>
        <member name="T:OxyPlot.SharpDX.Wpf.PlotView">
            <summary>
            Represents a control that displays a <see cref="T:OxyPlot.PlotModel" /> using SharpDX based renderer.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.ControllerProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.Controller"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.DefaultTrackerTemplateProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.DefaultTrackerTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.HandleRightClicksProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.HandleRightClicks"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.IsMouseWheelEnabledProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.IsMouseWheelEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.ModelProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.Model"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.ZoomRectangleTemplateProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.ZoomRectangleTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.PlotHeightProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.PlotHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.PlotWidthProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.PlotWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.PartPlotImage">
            <summary>
            The Grid PART constant.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.modelLock">
            <summary>
            The model lock.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.trackerDefinitions">
            <summary>
            The tracker definitions.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.mouseDownPoint">
            <summary>
            The mouse down point.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.currentModel">
            <summary>
            The current model.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.currentTracker">
            <summary>
            The current tracker.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.defaultController">
            <summary>
            The default controller.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.zoomRectangle">
            <summary>
            The zoom control.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.plotImage">
            <summary>
            Plot DirectX rendering goes here
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.PlotView.invalidated">
            <summary>
            Invalidate count.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.#cctor">
            <summary>
            Initializes static members of the <see cref="T:OxyPlot.SharpDX.Wpf.PlotView"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:OxyPlot.SharpDX.Wpf.PlotView" /> class.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.PlotHeight">
            <summary>
            Gets or sets the plot height
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.PlotWidth">
            <summary>
            Gets or sets the plot width
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.Controller">
            <summary>
            Gets or sets the PlotView controller.
            </summary>
            <value>The PlotView controller.</value>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.DefaultTrackerTemplate">
            <summary>
            Gets or sets the default tracker template.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.HandleRightClicks">
            <summary>
            Gets or sets a value indicating whether to handle right clicks.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.IsMouseWheelEnabled">
            <summary>
            Gets or sets a value indicating whether IsMouseWheelEnabled.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.Model">
            <summary>
            Gets or sets the <see cref="T:OxyPlot.PlotModel" /> to show.
            </summary>
            <value>The <see cref="T:OxyPlot.PlotModel" />.</value>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.ZoomRectangleTemplate">
            <summary>
            Gets or sets the zoom rectangle template.
            </summary>
            <value>The zoom rectangle template.</value>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.TrackerDefinitions">
            <summary>
            Gets the tracker definitions.
            </summary>
            <value>The tracker definitions.</value>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.OxyPlot#IView#ActualModel">
            <summary>
            Gets the actual model in the view.
            </summary>
            <value>
            The actual model.
            </value>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.ActualModel">
            <summary>
            Gets the actual model.
            </summary>
            <value>The actual model.</value>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.OxyPlot#IView#ActualController">
            <summary>
            Gets the actual controller.
            </summary>
            <value>
            The actual <see cref="T:OxyPlot.IController" />.
            </value>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.ClientArea">
            <summary>
            Gets the coordinates of the client area of the view.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.PlotView.ActualController">
            <summary>
            Gets the actual PlotView controller.
            </summary>
            <value>The actual PlotView controller.</value>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.HideTracker">
            <summary>
            Hides the tracker.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.HideZoomRectangle">
            <summary>
            Hides the zoom rectangle.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.InvalidatePlot(System.Boolean)">
            <summary>
            Invalidate the PlotView (not blocking the UI thread)
            </summary>
            <param name="update">if set to <c>true</c>, the data collections will be updated.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.SetCursorType(OxyPlot.CursorType)">
            <summary>
            Sets the cursor.
            </summary>
            <param name="cursor">The cursor.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.ShowTracker(OxyPlot.TrackerHitResult)">
            <summary>
            Shows the tracker.
            </summary>
            <param name="trackerHitResult">The tracker data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.ShowZoomRectangle(OxyPlot.OxyRect)">
            <summary>
            Shows the zoom rectangle.
            </summary>
            <param name="r">The rectangle.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.ToBitmap">
            <summary>
            Renders the PlotView to a bitmap.
            </summary>
            <returns>A bitmap.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OxyPlot#IPlotView#SetClipboardText(System.String)">
            <summary>
            Stores text on the clipboard.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes (such as a rebuilding layout pass) call ApplyTemplate. In simplest terms, this means the method is called just before a UI element displays in your app. Override this method to influence the default post-template logic of a class.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseWheel" /> event occurs to provide handling for the event in a derived class without attaching a delegate.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled MouseMove attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled MouseUp routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:OxyPlot.SharpDX.Wpf.PlotView.Model" /> property is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.BeginInvoke(System.Action)">
            <summary>
            Invokes the specified action on the UI Thread (without blocking the calling thread).
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the size of the control is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.OnModelChanged">
            <summary>
            Called when the model is changed.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.PlotView.UpdateModel(System.Boolean)">
            <summary>
            Updates the model.
            </summary>
            <param name="update">if set to <c>true</c>, the data collections will be updated.</param>
        </member>
        <member name="T:OxyPlot.SharpDX.Wpf.TrackerControl">
            <summary>
            Provides a tracker control.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.HorizontalLineVisibilityProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.HorizontalLineVisibility"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.VerticalLineVisibilityProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.VerticalLineVisibility"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.LineStrokeProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.LineStroke"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.LineExtentsProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.LineExtents"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.LineDashArrayProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.LineDashArray"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.BorderEdgeModeProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.BorderEdgeMode"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.ShowPointerProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.ShowPointer"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.CornerRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.DistanceProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.Distance"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.CanCenterHorizontallyProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.CanCenterHorizontally"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.CanCenterVerticallyProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.CanCenterVertically"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.PositionProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerControl.Position"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.PartPath">
            <summary>
            The path part.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.PartContent">
            <summary>
            The content part.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.PartContentcontainer">
            <summary>
            The content container part.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.PartHorizontalline">
            <summary>
            The horizontal line part.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.PartVerticalline">
            <summary>
            The vertical line part.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.content">
            <summary>
            The content.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.horizontalLine">
            <summary>
            The horizontal line.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.path">
            <summary>
            The path.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.contentContainer">
            <summary>
            The content container.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerControl.verticalLine">
            <summary>
            The vertical line.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.TrackerControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:OxyPlot.SharpDX.Wpf.TrackerControl" /> class.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.BorderEdgeMode">
            <summary>
            Gets or sets BorderEdgeMode.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.HorizontalLineVisibility">
            <summary>
            Gets or sets HorizontalLineVisibility.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.VerticalLineVisibility">
            <summary>
            Gets or sets VerticalLineVisibility.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.LineStroke">
            <summary>
            Gets or sets LineStroke.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.LineExtents">
            <summary>
            Gets or sets LineExtents.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.LineDashArray">
            <summary>
            Gets or sets LineDashArray.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.ShowPointer">
            <summary>
            Gets or sets a value indicating whether to show a 'pointer' on the border.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.CornerRadius">
            <summary>
            Gets or sets the corner radius (only used when ShowPoint=<c>false</c>).
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.Distance">
            <summary>
            Gets or sets the distance of the content container from the trackers Position.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.CanCenterHorizontally">
            <summary>
            Gets or sets a value indicating whether the tracker can center its content box horizontally.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.CanCenterVertically">
            <summary>
            Gets or sets a value indicating whether the tracker can center its content box vertically.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerControl.Position">
            <summary>
            Gets or sets Position of the tracker.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.TrackerControl.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes (such as a rebuilding layout pass) call ApplyTemplate. In simplest terms, this means the method is called just before a UI element displays in your app. Override this method to influence the default post-template logic of a class.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.TrackerControl.PositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the position is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.TrackerControl.OnPositionChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the position is changed.
            </summary>
            <param name="e">The dependency property changed event args.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.TrackerControl.UpdatePositionAndBorder">
            <summary>
            Update the position and border of the tracker.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.TrackerControl.CreateBorderGeometry(System.Windows.HorizontalAlignment,System.Windows.VerticalAlignment,System.Double,System.Double,System.Windows.Thickness@)">
            <summary>
            Create the border geometry.
            </summary>
            <param name="ha">The horizontal alignment.</param>
            <param name="va">The vertical alignment.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="margin">The margin.</param>
            <returns>The border geometry.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.TrackerControl.CreatePointerBorderGeometry(System.Windows.HorizontalAlignment,System.Windows.VerticalAlignment,System.Double,System.Double,System.Windows.Thickness@)">
            <summary>
            Creates a border geometry with a 'pointer'.
            </summary>
            <param name="ha">The horizontal alignment.</param>
            <param name="va">The vertical alignment.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="margin">The margin.</param>
            <returns>The border geometry.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.Wpf.TrackerDefinition">
            <summary>
            Represents a tracker definition.
            </summary>
            <remarks>The tracker definitions make it possible to show different trackers for different series.
            The <see cref="P:OxyPlot.Series.Series.TrackerKey" /> property is matched with the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerDefinition.TrackerKey" />
            in the TrackerDefinitions collection in the <see cref="T:OxyPlot.SharpDX.Wpf.PlotView" /> control.</remarks>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerDefinition.TrackerKeyProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerDefinition.TrackerKey"/> dependency property.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.TrackerDefinition.TrackerTemplateProperty">
            <summary>
            Identifies the <see cref="P:OxyPlot.SharpDX.Wpf.TrackerDefinition.TrackerTemplate"/> dependency property.
            </summary>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerDefinition.TrackerKey">
            <summary>
            Gets or sets the tracker key.
            </summary>
            <remarks>The Plot will use this property to find the TrackerDefinition that matches the TrackerKey of the current series.</remarks>
        </member>
        <member name="P:OxyPlot.SharpDX.Wpf.TrackerDefinition.TrackerTemplate">
            <summary>
            Gets or sets the tracker template.
            </summary>
            <remarks>The tracker control will be added/removed from the Tracker overlay as necessary.
            The DataContext of the tracker will be set to a TrackerHitResult with the current tracker data.</remarks>
        </member>
        <member name="T:OxyPlot.SharpDX.Wpf.ConverterExtensions">
            <summary>
            Extension method used to convert to/from Windows/Windows.Media classes.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.Wpf.ConverterExtensions.ByteToFloat">
            <summary>
            Byte to float converting coefficient.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.DistanceTo(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculate the distance between two points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToBrush(OxyPlot.OxyColor)">
            <summary>
            Converts an <see cref="T:OxyPlot.OxyColor" /> to a <see cref="T:System.Windows.Media.Brush" />.
            </summary>
            <param name="c">The color.</param>
            <returns>A <see cref="T:System.Windows.Media.SolidColorBrush" />.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToColor(OxyPlot.OxyColor)">
            <summary>
            Converts an <see cref="T:OxyPlot.OxyColor" /> to a <see cref="T:System.Windows.Media.Color" />.
            </summary>
            <param name="c">The color.</param>
            <returns>A Color.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToColor4(OxyPlot.OxyColor)">
            <summary>
             Converts an <see cref="T:OxyPlot.OxyColor" /> to a <see cref="T:SharpDX.Color4" />.
            </summary>
            <param name="c">The color.</param>
            <returns>A Color.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToDXColor(OxyPlot.OxyColor)">
            <summary>
             Converts an <see cref="T:OxyPlot.OxyColor" /> to a <see cref="T:SharpDX.Color" />.
            </summary>
            <param name="c">The color.</param>
            <returns>A Color.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToThickness(OxyPlot.OxyThickness)">
            <summary>
            Converts an OxyThickness to a Thickness.
            </summary>
            <param name="c">The thickness.</param>
            <returns>A <see cref="T:System.Windows.Thickness" /> instance.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToVector(OxyPlot.ScreenVector)">
            <summary>
            Converts a ScreenVector to a Vector.
            </summary>
            <param name="c">The c.</param>
            <returns>A <see cref="T:System.Windows.Vector" /> instance.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToHorizontalAlignment(System.Windows.HorizontalAlignment)">
            <summary>
            Converts a HorizontalAlignment to a HorizontalAlignment.
            </summary>
            <param name="alignment">The alignment.</param>
            <returns>A HorizontalAlignment.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToVerticalAlignment(System.Windows.VerticalAlignment)">
            <summary>
            Converts a HorizontalAlignment to a VerticalAlignment.
            </summary>
            <param name="alignment">The alignment.</param>
            <returns>A VerticalAlignment.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToOxyColor(System.Windows.Media.Color)">
            <summary>
            Converts a Color to an OxyColor.
            </summary>
            <param name="color">The color.</param>
            <returns>An OxyColor.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToOxyColor(System.Windows.Media.Brush)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Brush" /> to an <see cref="T:OxyPlot.OxyColor" />.
            </summary>
            <param name="brush">The brush.</param>
            <returns>An <see cref="T:OxyPlot.OxyColor" />.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToOxyThickness(System.Windows.Thickness)">
            <summary>
            Converts a Thickness to an <see cref="T:OxyPlot.OxyThickness" />.
            </summary>
            <param name="t">The thickness.</param>
            <returns>An <see cref="T:OxyPlot.OxyThickness" />.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToScreenPoint(System.Windows.Point)">
            <summary>
            Converts a <see cref="T:System.Windows.Point" /> to a <see cref="T:OxyPlot.ScreenPoint" />.
            </summary>
            <param name="pt">The point.</param>
            <returns>A <see cref="T:OxyPlot.ScreenPoint" />.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToScreenPointArray(System.Windows.Point[])">
            <summary>
            Converts a Point array to a ScreenPoint array.
            </summary>
            <param name="points">The points.</param>
            <returns>A ScreenPoint array.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToScreenVector(System.Windows.Vector)">
            <summary>
            Converts the specified vector to a ScreenVector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>A <see cref="T:OxyPlot.ScreenVector" />.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.Convert(System.Windows.Input.Key)">
            <summary>
            Converts the specified key.
            </summary>
            <param name="k">The key to convert.</param>
            <returns>The converted key.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.Convert(System.Windows.Input.MouseButton)">
            <summary>
            Converts the specified button.
            </summary>
            <param name="button">The button to convert.</param>
            <returns>The converted mouse button.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToMouseWheelEventArgs(System.Windows.Input.MouseWheelEventArgs,System.Windows.IInputElement,System.Windows.Vector)">
            <summary>
            Converts <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> to <see cref="T:OxyPlot.OxyMouseWheelEventArgs" /> for a mouse wheel event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> instance containing the event data.</param>
            <param name="relativeTo">The <see cref="T:System.Windows.IInputElement" /> that the event is relative to.</param>
            <param name="offset">The <see cref="T:System.Windows.Vector" /> offset that event is relative to.</param>
            <returns>A <see cref="T:OxyPlot.OxyMouseWheelEventArgs" /> containing the converted event arguments.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToMouseDownEventArgs(System.Windows.Input.MouseButtonEventArgs,System.Windows.IInputElement,System.Windows.Vector)">
            <summary>
            Converts <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> to <see cref="T:OxyPlot.OxyMouseEventArgs" /> for a mouse down event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.</param>
            <param name="relativeTo">The <see cref="T:System.Windows.IInputElement" /> that the event is relative to.</param>
            <param name="offset">The <see cref="T:System.Windows.Vector" /> offset that event is relative to.</param>
            <returns>A <see cref="T:OxyPlot.OxyMouseEventArgs" /> containing the converted event arguments.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToMouseReleasedEventArgs(System.Windows.Input.MouseButtonEventArgs,System.Windows.IInputElement,System.Windows.Vector)">
            <summary>
            Converts <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> to <see cref="T:OxyPlot.OxyMouseEventArgs" /> for a mouse up event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.</param>
            <param name="relativeTo">The <see cref="T:System.Windows.IInputElement" /> that the event is relative to.</param>
            <param name="offset">The <see cref="T:System.Windows.Vector" /> offset that event is relative to.</param>
            <returns>A <see cref="T:OxyPlot.OxyMouseEventArgs" /> containing the converted event arguments.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToMouseEventArgs(System.Windows.Input.MouseEventArgs,System.Windows.IInputElement,System.Windows.Vector)">
            <summary>
            Converts <see cref="T:System.Windows.Input.MouseEventArgs" /> to <see cref="T:OxyPlot.OxyMouseEventArgs" /> for a mouse event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> instance containing the event data.</param>
            <param name="relativeTo">The <see cref="T:System.Windows.IInputElement" /> that the event is relative to.</param>
            <param name="offset">The <see cref="T:System.Windows.Vector" /> offset that event is relative to.</param>
            <returns>A <see cref="T:OxyPlot.OxyMouseEventArgs" /> containing the converted event arguments.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToTouchEventArgs(System.Windows.Input.ManipulationStartedEventArgs,System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Vector)">
            <summary>
            Converts <see cref="T:System.Windows.Input.ManipulationStartedEventArgs" /> to <see cref="T:OxyPlot.OxyMouseEventArgs" /> for a touch started event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.ManipulationStartedEventArgs" /> instance containing the event data.</param>
            <param name="source">The <see cref="T:System.Windows.FrameworkElement"/> that is event source</param>
            <param name="relativeTo">The <see cref="T:System.Windows.UIElement" /> that the event is relative to.</param>
            <param name="offset">The <see cref="T:System.Windows.Vector" /> offset that event is relative to.</param>
            <returns>A <see cref="T:OxyPlot.OxyMouseEventArgs" /> containing the converted event arguments.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToTouchEventArgs(System.Windows.Input.ManipulationDeltaEventArgs,System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Vector)">
            <summary>
            Converts <see cref="T:System.Windows.Input.ManipulationDeltaEventArgs" /> to <see cref="T:OxyPlot.OxyMouseEventArgs" /> for a touch delta event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.ManipulationDeltaEventArgs" /> instance containing the event data.</param>
            <param name="source">The <see cref="T:System.Windows.FrameworkElement"/> that is event source</param>
            <param name="relativeTo">The <see cref="T:System.Windows.UIElement" /> that the event is relative to.</param>
            <param name="offset">The <see cref="T:System.Windows.Vector" /> offset that event is relative to.</param>
            <returns>A <see cref="T:OxyPlot.OxyMouseEventArgs" /> containing the converted event arguments.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.ConverterExtensions.ToTouchEventArgs(System.Windows.Input.ManipulationCompletedEventArgs,System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Vector)">
            <summary>
            Converts <see cref="T:System.Windows.Input.ManipulationCompletedEventArgs" /> to <see cref="T:OxyPlot.OxyMouseEventArgs" /> for a touch completed event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.ManipulationCompletedEventArgs" /> instance containing the event data.</param>
            <param name="source">The <see cref="T:System.Windows.FrameworkElement"/> that is event source</param>
            <param name="relativeTo">The <see cref="T:System.Windows.UIElement" /> that the event is relative to.</param>
            <param name="offset">The <see cref="T:System.Windows.Vector" /> offset that event is relative to.</param>
            <returns>A <see cref="T:OxyPlot.OxyMouseEventArgs" /> containing the converted event arguments.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.Wpf.Keyboard">
            <summary>
            Provides utility methods related to the keyboard.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.Wpf.Keyboard.GetModifierKeys">
            <summary>
            Gets the current modifier keys.
            </summary>
            <returns>A <see cref="T:OxyPlot.OxyModifierKeys" /> value.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.CacherRenderContext">
            <summary>
            Represents class, that implements IRenderContext and caches render units to use them later render
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.brushCache">
            <summary>
            The brush cache.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.imagesInUse">
            <summary>
            The images in use
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.imageCache">
            <summary>
            The image cache
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.d2dFactory">
            <summary>
            The Direct2D factory
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.dwtFactory">
            <summary>
            The DirectWrite factory
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.wicFactory">
            <summary>
            The WIC factory
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.renderTarget">
            <summary>
            The render target
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.renderUnits">
            <summary>
            Units that will be rendered on Render call
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.currentToolTip">
            <summary>
            The current tool tip
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.CacherRenderContext.clipRect">
            <summary>
            The clip rectangle.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SharpDX.CacherRenderContext" /> class.
            </summary>      
        </member>
        <member name="P:OxyPlot.SharpDX.CacherRenderContext.PaintBackground">
            <summary>
            Gets a value indicating whether to paint the background.
            </summary>
            <value><c>true</c> if the background should be painted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OxyPlot.SharpDX.CacherRenderContext.RendersToScreen">
            <summary>
            Gets or sets a value indicating whether the context renders to screen.
            </summary>
            <value><c>true</c> if the context renders to screen; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OxyPlot.SharpDX.CacherRenderContext.D2DFactory">
            <summary>
            Gets or sets the Direct2D factory
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawEllipse(OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The thickness.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawEllipses(System.Collections.Generic.IList{OxyPlot.OxyRect},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the collection of ellipses, where all have the same stroke and fill.
            This performs better than calling DrawEllipse multiple times.
            </summary>
            <param name="rectangles">The rectangles.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawLine(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.LineJoin,System.Boolean)">
            <summary>
            Draws the polyline from the specified points.
            </summary>
            <param name="points">The points.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashArray">The dash array.</param>
            <param name="lineJoin">The line join type.</param>
            <param name="aliased">if set to <c>true</c> the shape will be aliased.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawLineSegments(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.LineJoin,System.Boolean)">
            <summary>
            Draws the multiple line segments defined by points (0,1) (2,3) (4,5) etc.
            This should have better performance than calling DrawLine for each segment.
            </summary>
            <param name="points">The points.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashArray">The dash array.</param>
            <param name="lineJoin">The line join type.</param>
            <param name="aliased">if set to <c>true</c> the shape will be aliased.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawPolygon(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.LineJoin,System.Boolean)">
            <summary>
            Draws the polygon from the specified points. The polygon can have stroke and/or fill.
            </summary>
            <param name="points">The points.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashArray">The dash array.</param>
            <param name="lineJoin">The line join type.</param>
            <param name="aliased">if set to <c>true</c> the shape will be aliased.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawPolygons(System.Collections.Generic.IList{System.Collections.Generic.IList{OxyPlot.ScreenPoint}},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.LineJoin,System.Boolean)">
            <summary>
            Draws a collection of polygons, where all polygons have the same stroke and fill.
            This performs better than calling DrawPolygon multiple times.
            </summary>
            <param name="polygons">The polygons.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashArray">The dash array.</param>
            <param name="lineJoin">The line join type.</param>
            <param name="aliased">if set to <c>true</c> the shape will be aliased.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawRectangle(OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawRectangles(System.Collections.Generic.IList{OxyPlot.OxyRect},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws a collection of rectangles, where all have the same stroke and fill.
            This performs better than calling DrawRectangle multiple times.
            </summary>
            <param name="rectangles">The rectangles.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawText(OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize})">
            <summary>
            Draws the text.
            </summary>
            <param name="p">The position.</param>
            <param name="text">The text.</param>
            <param name="fill">The fill color.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="rotate">The rotation angle.</param>
            <param name="halign">The horizontal alignment.</param>
            <param name="valign">The vertical alignment.</param>
            <param name="maxSize">The maximum size of the text.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.MeasureText(System.String,System.String,System.Double,System.Double)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontWeight">The font weight.</param>
            <returns>The text size.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.SetToolTip(System.String)">
            <summary>
            Sets the tool tip for the following items.
            </summary>
            <param name="text">The text in the tooltip.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.DrawImage(OxyPlot.OxyImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Draws the specified portion of the specified <see cref="T:OxyPlot.OxyImage" /> at the specified location and with the specified size.
            </summary>
            <param name="source">The source.</param>
            <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="srcWidth">Width of the portion of the source image to draw.</param>
            <param name="srcHeight">Height of the portion of the source image to draw.</param>
            <param name="destX">The x-coordinate of the upper-left corner of drawn image.</param>
            <param name="destY">The y-coordinate of the upper-left corner of drawn image.</param>
            <param name="destWidth">The width of the drawn image.</param>
            <param name="destHeight">The height of the drawn image.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolate">interpolate if set to <c>true</c>.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.SetClip(OxyPlot.OxyRect)">
            <summary>
            Sets the clipping rectangle.
            </summary>
            <param name="clippingRect">The clipping rectangle.</param>
            <returns>True if the clipping rectangle was set.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.ResetClip">
            <summary>
            Resets the clipping rectangle.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.CleanUp">
            <summary>
            Cleans up resources not in use.
            </summary>
            <remarks>This method is called at the end of each rendering.</remarks>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.ResetRenderTarget(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            On changing renderTarget (on resize for example), this method should be called.
            Clears invalid for new renderTarget resources (like brushes).
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.ResetRenderUnits">
            <summary>
            On plot invalidate this method should be called
            Clear current cached geometries
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.Render(SharpDX.RectangleF)">
            <summary>
            Renders cached render units.
            This method should be called on redraw required
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.GetFontWeight(System.Double)">
            <summary>
            Gets the font weight.
            </summary>
            <param name="fontWeight">The font weight.</param>
            <returns>A <see cref="T:SharpDX.DirectWrite.FontWeight" /></returns>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.GetStroke(System.Double[],OxyPlot.LineJoin)">
            <summary>
            Gets the stroke.
            </summary>
            <param name="dashArray">The dashes array.</param>
            <param name="lineJoin">The line join type.</param>
            <returns>Returns stroke stroke style.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.GetBrush(OxyPlot.OxyColor)">
            <summary>
            Get the brush with <paramref name="color"/> color.
            </summary>
            <param name="color">The color.</param>
            <returns>Return the brush.</returns>
        </member>
        <member name="M:OxyPlot.SharpDX.CacherRenderContext.GetBitmap(OxyPlot.OxyImage)">
            <summary>
            Gets bitmap.
            </summary>
            <param name="image">The image.</param>
            <returns>Returns bitmap.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.EllipseRenderUnit">
            <summary>
            Represents a Ellipse IRenderUnit implementation.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.EllipseRenderUnit.bounds">
            <summary>
            The bounds.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.EllipseRenderUnit.ellipse">
            <summary>
            The ellipse.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.EllipseRenderUnit.stroke">
            <summary>
            The stroke.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.EllipseRenderUnit.fill">
            <summary>
            The fill.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.EllipseRenderUnit.thickness">
            <summary>
            The thickness;
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.EllipseRenderUnit.#ctor(SharpDX.Direct2D1.Ellipse,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SharpDX.EllipseRenderUnit" /> class.
            </summary>
            <param name="ellipse">The ellipse.</param>
            <param name="stroke">The stroke.</param>
            <param name="fill">The fill.</param>
            <param name="thickness">The thickness.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.EllipseRenderUnit.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.EllipseRenderUnit.Render(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Renders ellipse represented by current instance to render target.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.EllipseRenderUnit.CheckBounds(SharpDX.RectangleF)">
            <summary>
            Checks if current instance bounds intersects with viewport or not.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>Return <c>True</c> if bounds intersects with viewport, otherwise <c>False</c>.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.GeometryRenderUnit">
            <summary>
            Represents a Geometry IRenderUnit implementation.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.GeometryRenderUnit.geometry">
            <summary>
            The geometry.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.GeometryRenderUnit.bounds">
            <summary>
            The bounds.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.GeometryRenderUnit.fill">
            <summary>
            The fill.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.GeometryRenderUnit.stroke">
            <summary>
            The stroke.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.GeometryRenderUnit.strokeStyle">
            <summary>
            The stroke style.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.GeometryRenderUnit.strokeWidth">
            <summary>
            The stroke width.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.GeometryRenderUnit.#ctor(SharpDX.Direct2D1.Geometry,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.Brush,System.Single,SharpDX.Direct2D1.StrokeStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SharpDX.GeometryRenderUnit" /> class.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="stroke">The stroke.</param>
            <param name="fill">The fill.</param>
            <param name="strokeWidth">The stroke width.</param>
            <param name="strokeStyle">The stroke style.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.GeometryRenderUnit.Render(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Renders geometry represented by current instance to render target.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.GeometryRenderUnit.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.GeometryRenderUnit.CheckBounds(SharpDX.RectangleF)">
            <summary>
            Checks if current instance bounds intersects with viewport or not.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>Return <c>True</c> if bounds intersects with viewport, otherwise <c>False</c>.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.ImageRenderUnit">
            <summary>
            Represents a Image IRenderUnit implementation.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.ImageRenderUnit.bitmap">
            <summary>
            The bitmap.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.ImageRenderUnit.src">
            <summary>
            The source rectangle.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.ImageRenderUnit.dest">
            <summary>
            The destination rectangle.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.ImageRenderUnit.opacity">
            <summary>
            The opacity.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.ImageRenderUnit.mode">
            <summary>
            The interpolation mode.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.ImageRenderUnit.#ctor(SharpDX.Direct2D1.Bitmap,SharpDX.RectangleF,SharpDX.RectangleF,System.Single,SharpDX.Direct2D1.BitmapInterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SharpDX.ImageRenderUnit" /> class.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="src">The source rectangle.</param>
            <param name="dest">The destination rectangle.</param>
            <param name="opacity">The opacity.</param>
            <param name="mode">The interpolation mode.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.ImageRenderUnit.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.ImageRenderUnit.Render(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Renders image represented by current instance to render target.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.ImageRenderUnit.CheckBounds(SharpDX.RectangleF)">
            <summary>
            Checks if current instance bounds intersects with viewport or not.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>Return <c>True</c> if bounds intersects with viewport, otherwise <c>False</c>.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.IRenderUnit">
            <summary>
            Represents a IRenderUnit definition.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.IRenderUnit.Render(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Renders image represented by current instance to render target.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.IRenderUnit.CheckBounds(SharpDX.RectangleF)">
            <summary>
            Checks if current instance bounds intersects with viewport or not.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>Return <c>True</c> if bounds intersects with viewport, otherwise <c>False</c>.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.RectangleRenderUnit">
            <summary>
            Represents a Rectangle IRenderUnit implementation.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.RectangleRenderUnit.rectangle">
            <summary>
            The rectangle.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.RectangleRenderUnit.stroke">
            <summary>
            The stroke.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.RectangleRenderUnit.fill">
            <summary>
            The fill.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.RectangleRenderUnit.thickness">
            <summary>
            The thickness.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.RectangleRenderUnit.#ctor(SharpDX.RectangleF,SharpDX.Direct2D1.Brush,SharpDX.Direct2D1.Brush,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SharpDX.RectangleRenderUnit" /> class.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="stroke">The stroke.</param>
            <param name="fill">The fill.</param>
            <param name="thickness">The thickness.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.RectangleRenderUnit.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.RectangleRenderUnit.Render(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Renders rectangle represented by current instance to render target.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.RectangleRenderUnit.CheckBounds(SharpDX.RectangleF)">
            <summary>
            Checks if current instance bounds intersects with viewport or not.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>Return <c>True</c> if bounds intersects with viewport, otherwise <c>False</c>.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.TextRenderUnit">
            <summary>
            Represents a Text IRenderUnit implementation.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.TextRenderUnit.transform">
            <summary>
            The text transform.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.TextRenderUnit.layout">
            <summary>
            The text layout.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.TextRenderUnit.brush">
            <summary>
            The brush.
            </summary>
        </member>
        <member name="F:OxyPlot.SharpDX.TextRenderUnit.bounds">
            <summary>
            The bounds.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.TextRenderUnit.#ctor(SharpDX.DirectWrite.TextLayout,SharpDX.Direct2D1.Brush,SharpDX.Matrix3x2)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SharpDX.TextRenderUnit" /> class.
            </summary>
            <param name="textLayout">The text layout.</param>
            <param name="brush">The brush.</param>
            <param name="transform">The text transform.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.TextRenderUnit.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.TextRenderUnit.Render(SharpDX.Direct2D1.RenderTarget)">
            <summary>
            Renders text represented by current instance to render target.
            </summary>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:OxyPlot.SharpDX.TextRenderUnit.CheckBounds(SharpDX.RectangleF)">
            <summary>
            Checks if current instance bounds intersects with viewport or not.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>Return <c>True</c> if bounds intersects with viewport, otherwise <c>False</c>.</returns>
        </member>
        <member name="T:OxyPlot.SharpDX.SharpDXOxyExtensions">
            <summary>
            Represents class, that contains SharpDX and Oxy extensions.
            </summary>
        </member>
        <member name="M:OxyPlot.SharpDX.SharpDXOxyExtensions.ToVector2(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Converts <see cref="T:OxyPlot.ScreenPoint"/> to <see cref="T:SharpDX.Vector2"/>.
            </summary>
            <param name="point">The point to convert,</param>
            <param name="aliased">Indicate, whether result should be aliased</param>
            <returns>Return <see cref="T:SharpDX.Vector2"/></returns>
        </member>
        <member name="M:OxyPlot.SharpDX.SharpDXOxyExtensions.ToEllipse(OxyPlot.OxyRect)">
            <summary>
            Converts <see cref="T:OxyPlot.OxyRect"/> to <see cref="T:SharpDX.Direct2D1.Ellipse"/>.
            </summary>
            <param name="rect">The rectangle to convert.</param>
            <returns>Return <see cref="T:SharpDX.Direct2D1.Ellipse"/></returns>
        </member>
        <member name="M:OxyPlot.SharpDX.SharpDXOxyExtensions.ToRectangleF(OxyPlot.OxyRect)">
            <summary>
            Converts <see cref="T:OxyPlot.OxyRect"/> to <see cref="T:SharpDX.RectangleF"/>.
            </summary>
            <param name="rect">The rectangle to convert.</param>
            <returns>Return <see cref="T:SharpDX.RectangleF"/></returns>
        </member>
        <member name="M:OxyPlot.SharpDX.SharpDXOxyExtensions.ToDXLineJoin(OxyPlot.LineJoin)">
            <summary>
            Converts <see cref="T:OxyPlot.LineJoin"/> to <see cref="T:SharpDX.Direct2D1.LineJoin"/>.
            </summary>
            <param name="lineJoin">The <see cref="T:OxyPlot.LineJoin"/> to convert.</param>
            <returns>Return <see cref="T:OxyPlot.LineJoin"/></returns>
        </member>
        <member name="M:OxyPlot.SharpDX.SharpDXOxyExtensions.ToDXColor(OxyPlot.OxyColor)">
            <summary>
            Converts <see cref="T:OxyPlot.OxyColor"/> to <see cref="T:SharpDX.Color4"/>.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>Return <see cref="T:SharpDX.Color4"/></returns>
        </member>
    </members>
</doc>
